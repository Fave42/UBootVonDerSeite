[gd_scene load_steps=4 format=2]

[ext_resource path="res://ui/icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends KinematicBody2D

const World = preload(\"res://levels/World.gd\")

var gravity = 10
const floorUp = Vector2(0, -1)
export var speed = 200

export (NodePath) onready var drop_item_to

# Do not export, because then it cannot be easily nulled at the beginning
# If this is exported, there is a ghostitem in the players hand that has
# to be discarded before he can pick up any object
var holding

var velocity = Vector2()
var ladder_on = false

func _ready():
	self.add_to_group(\"players\")

func _physics_process(delta):
	var movement_direction = 0;
	gravity = 10
	
	velocity.y += gravity
	if is_on_floor():
		velocity.y = gravity
		if Input.is_action_pressed('jump'):
			velocity.y = -300
	
		
	if Input.is_action_pressed(\"ui_left\"):
		movement_direction -= speed
	
	if Input.is_action_pressed(\"ui_right\"):
		movement_direction += speed
	if ladder_on == true:
		gravity = 0
		if Input.is_action_pressed((\"ui_down\")):
			velocity.y = speed
		elif Input.is_action_pressed((\"ui_up\")):
			velocity.y = -speed
		
	velocity.x = movement_direction

	velocity = move_and_slide(velocity, floorUp)
	
	if Input.is_action_pressed(\"interact\"):
		var areas = $Area2D.get_overlapping_areas()
		if areas.size() > 0 && areas[0].has_method(\"interact_with_player\"):
			areas[0].call(\"interact_with_player\", self)
			
	if Input.is_action_pressed(\"drop_item\"):
		if holding != null:
			var itemtodrop = pickupable.new()
			itemtodrop.texture = load(\"res://items/interactables/bed/Bedsheet.png\")
			itemtodrop.item_type = holding
			# Set itemposition to player position. Otherwise it will spawn
			# at (0,0)
			itemtodrop.position = self.position
			get_node(drop_item_to).add_child(itemtodrop)
		self.set_holding(null)
		
func can_pickup():
	return holding == null
		
func take_item():
	var item = self.holding
	self.set_holding(null)
	return item
	
func take_item_if_eq(item):
	var holding = self.holding
	if holding == item:
		self.set_holding(null)
		return holding
	else:
		return null
		
func set_holding(item):
	holding = item
	
	if item == null:
		$Holding.texture = null
	else:
		var asset = \"\";
		match item:
			World.Item.Gasoline:
				asset = \"gasoline/Gasoline.png\"
			World.Item.Bucket:
				asset = \"bucket/Bucket.png\"
			World.Item.Bedsheet:
				asset = \"bed/Bedsheet.png\"
		$Holding.texture = load(\"res://items/interactables/\" + asset)

"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 35, 35 )

[node name="Player" type="KinematicBody2D"]
position = Vector2( 455.404, 315.827 )
collision_layer = 2
collision_mask = 3
script = SubResource( 2 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 1 )

[node name="Holding" type="Sprite" parent="."]
position = Vector2( 0, 20 )
scale = Vector2( 0.3, 0.3 )
